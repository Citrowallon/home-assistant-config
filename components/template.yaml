# https://www.home-assistant.io/integrations/template/
sensor:
  - name: teuteu_last_cleaning_area
    unique_id: teuteu_last_cleaning_area
    state: "{{state_attr('vacuum.teuteu' , 'clean_area') | round(1,'half',0) }}"
    unit_of_measurement: "m2"
    icon: mdi:checkbox-blank-outline

  - name: neuneu_last_cleaning_area
    unique_id: neuneu_last_cleaning_area
    state: "{{state_attr('vacuum.neuneu' , 'vacuum_extend.cleaning_area') | round(1,'half',0) }}"
    unit_of_measurement: "m2"
    icon: mdi:checkbox-blank-outline

binary_sensor:
  - name: home_occupied
    unique_id: home_occupied
    state: "{{is_state('person.jenova70', 'home') or is_state('person.valentine', 'home')}}"
    device_class: occupancy
    icon: >-
      {% if is_state("binary_sensor.home_occupied", "on") -%}
      mdi:home-account
      {%- else -%}
      mdi:home
      {%- endif %}

  - name: far_away
    unique_id: far_away
    state: "{{states('proximity.distance_jl_home') | int(default = 0) > 80 and states('proximity.distance_valentine_home') | int(default = 0) > 80 }}"

  - name: is_tv_used
    unique_id: is_tv_used
    state: "{{is_state('media_player.philips_android_tv', 'playing') or is_state('media_player.philips_android_tv', 'paused')}}"

  - name: is_tv_on
    unique_id: is_tv_on
    state: "{{not (is_state('media_player.philips_android_tv', 'off') or is_state('media_player.philips_android_tv', 'unavailable') or is_state('media_player.philips_android_tv', 'standby') or is_state('media_player.philips_android_tv', 'unknown'))}}"

  - name: is_ps5_used
    unique_id: is_ps5_used
    state: "{{is_state_attr('media_player.philips_android_tv', 'hdmi_input', 'HW5')}}"

  - name: is_sun_rising
    unique_id: is_sun_rising
    state: "{{is_state_attr('sun.sun', 'rising', true)}}"

  - name: is_washing_machine_running
    unique_id: is_washing_machine_running
    state: "{{ states('sensor.machine_a_laver_power_2') | float(default = 0) > 5 }}"
    device_class: running
    delay_on: "0:01:00"
    delay_off: "0:01:00"

  - name: is_litter_full
    unique_id: is_litter_full
    state: "{{states('input_number.litter_tracking') | float(default = 0) >= 5 }}"
    device_class: problem

  - name: should_teuteu_run
    unique_id: should_teuteu_run
    state: "{{ as_timestamp(utcnow() , 0) -  as_timestamp(states('input_datetime.dernier_nettoyage_de_teuteu') , 0 ) > 1 * 24 * 60 * 60 }}"
    device_class: problem

  - name: should_teuteu_run_urgently
    unique_id: should_teuteu_run_urgently
    state: "{{ as_timestamp(utcnow() , 0) -  as_timestamp(states('input_datetime.dernier_nettoyage_de_teuteu') , 0 ) > 3 * 24 * 60 * 60 }}"
    device_class: problem

  - name: should_neuneu_run
    unique_id: should_neuneu_run
    state: "{{ as_timestamp(utcnow() , 0) -  as_timestamp(states('input_datetime.dernier_nettoyage_de_neuneu') , 0 ) > 1 * 24 * 60 * 60 }}"
    device_class: problem

  - name: should_neuneu_run_urgently
    unique_id: should_neuneu_run_urgently
    state: "{{ as_timestamp(utcnow() , 0) -  as_timestamp(states('input_datetime.dernier_nettoyage_de_neuneu') , 0 ) > 3 * 24 * 60 * 60 }}"
    device_class: problem

  - name: is_front_door_recently_open
    unique_id: :is_front_door_recently_open
    state: "{{ is_state('binary_sensor.capteur_ouverture_porte_entree', 'on') }}"
    delay_off: "0:00:45"
