esphome:
  name: slack_cube_v2
  platform: ESP32
  board: esp-wrover-kit

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pwd

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Slack Cube Fallback Hotspot"
    password: !secret esphome_pwd

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esphome_pwd

ota:
  password: !secret esphome_pwd

deep_sleep:
  id: deep_sleep_1
  run_duration: 1min
  wakeup_pin: 
    number: 13

binary_sensor:
  - platform: homeassistant
    name: "Input Boolean From Home Assistant"
    entity_id: input_boolean.slack_cube_ota
    internal: True
    on_state:
      then:
        - if:
            condition:
              lambda: return x;
            then:
              deep_sleep.prevent: deep_sleep_1
        - if:
            condition:
              lambda: return !x;
            then:
              deep_sleep.enter: deep_sleep_1

i2c:
  sda: 21
  scl: 22

sensor:
  - platform: mpu6050
    address: 0x68
    accel_x:
      id: gyro_x
      internal: true
    accel_y:
      id: gyro_y
      internal: true
    accel_z:
      id: gyro_z
      internal: true
    update_interval: 2s
    
text_sensor:
  - platform: template
    name: "Cube Face"
    id: "cude_face"
    lambda: |-
      if ( abs(id(gyro_x).state) < 2 && abs(id(gyro_y).state) < 2) {
        if (id(gyro_z).state >= 9) {
          return {"FACE_4"};
        } else if (id(gyro_z).state <= -9) {
          return {"FACE_2"};
        } else {
          return {};
        }
      } else if (abs(id(gyro_y).state) < 2 && abs(id(gyro_z).state) < 2) {
        if (id(gyro_x).state >= 9) {
          return {"FACE_5"};
        } else if (id(gyro_x).state <= -9) {
          return {"FACE_6"};
        } else {
          return {};
        }
      } else if (abs(id(gyro_z).state) < 2 && abs(id(gyro_x).state) < 2) {
        if (id(gyro_y).state >= 9) {
          return {"FACE_3"};
        } else if (id(gyro_y).state <= -9) {
          return {"FACE_1"};
        } else {
          return {};
        }
      } else {
        return {};
      }
    update_interval: 2s
